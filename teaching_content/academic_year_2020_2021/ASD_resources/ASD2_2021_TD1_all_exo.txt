Algorithme somme5;

Variables
    resultat, a,b,c,d,e: entier;

Fonction som(x1: entier, x2: entier, x3: entier, x4: entier, x5: entier): entier;

    Variables
        res:entier;

    Début
        res ◄- x1 + x2 + x3 + x4 + x5;

        Retourner res;
    FinFonction

  

Début
    a ◄- 1; b ◄- 2; c ◄- 3; d ◄- 4; e ◄- 5;

    resultat ◄- som(a,b,c,d,e);
    resultat ◄- som(4,5,3);
    
    Ecrire(resultat);

Fin.




Algorithme sorted;

    Variables
        n: entier;
        T: Tableau [1..5] de entier;

    Procédure sorted_or_not(A: Tableau, n: entier);
        
        Variables
            resultat: booléen;
            i: entier;
    Début
        resultat = vrai;

        Pour i De: 1 A: n Pas: 1 Faire
            
            Si (A[i] > A[i+1]) Alors
                resultat = faux;
                break;
            FinSi;
        FinPour;
        
        Ecrire(resultat);
    FinProcédure
Début
    n = 5;
    T = {1,2,3,4,5}
    sorted_or_not(T, n);
Fin.



#include <stdio.h>
 
void swap(int x, int y);

int main () {

   int a = 100, b = 200;
 
   printf("Before swap, value of a : %d\n", a );
   printf("Before swap, value of b : %d\n", b );
 
   /* calling a function to swap the values */
   swap(a, b);
 
   printf("After swap, value of a : %d\n", a );
   printf("After swap, value of b : %d\n", b );
   return 0;
}

void swap(int x, int y) {

   int temp;

   temp = x; /* save the value of x */
   x = y;    /* put y into x */
   y = temp; /* put temp into y */
   system("pause"); 

}




#include <stdio.h>
 
void swap(int *x, int *y);
 
int main () {

   int a = 100, b = 200;

   printf("Before swap, value of a : %d\n", a );
   printf("Before swap, value of b : %d\n", b );
 
   /* calling a function to swap the values.
      * &a indicates pointer (address) to a 
      * &b indicates pointer to b 
   */
   swap(&a, &b);
 
   printf("After swap, value of a : %d\n", a );
   printf("After swap, value of b : %d\n", b );
   return 0;
}


void swap(int *x, int *y) {

   int temp;
   temp = *x;    /* save the value at address x */
   *x = *y;      /* put y into x */
   *y = temp;    /* put temp into y */
   system("pause"); 

}


#include<stdio.h>
#include<string.h>

int count_vowels(char []);
int check_vowel(char);

int main()
{
   char mot[100];
   int c;
   
   printf("Enter a string\n");
   gets(mot);
   
   c = count_vowels(mot);
   
   printf("Number of vowels: %d\n", c);
   
   return 0;
}

int count_vowels(char a[])
{
   int count = 0, c = 0, flag;
   char d;
   
   do
   {   
      // a [h, E, l,l,o,\0]
      d = a[c]; E
      
      flag = check_vowel(d);

      if (flag == 1)
         count++;
      
      c++;
   } while (d != '\0');
   
   return count;
}

int check_vowel(char ch)
{
   if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')
      return 1;
 
   if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')
      return 1;
   
   return 0;
}



Algorithme tri;

    
    Variables
        T: Tableau [1..5] de entier;
    

    Procédure tri_selection(A: Tableau, n:entier);
    
        Variables
            ind,min, temp,i:entier;

    Début

    Pour ind De: 1 A n-1 faire 
        min ◄- ind ;
        pour i De: ind + 1 A n faire 
            si A[i] < A[min] alors
                min ◄- i ;
            finsi ;
        finpour ; 
        
        temp ◄- A[ind] ; 
        A[ind] ◄- A[min] ; 
        A[min] ◄- temp ; 
    Finpour ;

    Pour i De: 1 A: n Pas: 1 Faire
        Ecrire(A[i]);
    FinPour;
        
    FinProcédure

Début
    T ◄- {1, 10, 2, 3, 100};
    n ◄- 5;
    tri_selection(T, n);
Fin.



#include <stdio.h>

void sort_table(int [], int);

int main()
{
    int T[100], n, i, j, position, swap;
    int low, high, mid, key;

    printf("Enter number of elements n: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        printf("Enter T[%d]: ", i);
        scanf("%d", &T[i]);
    }

    sort_table(T, n);

    return 0;
}

void sort_table(int T[], int n){

    int i, j, position, swap;
    int low, high, mid, key;

    for(i = 0; i < n - 1; i++)
    {
        position=i;
        for(j = i + 1; j < n; j++)
        {
            if(T[position] > T[j])
                position=j;
        }

        if(position != i)
        {
            swap=T[i];
            T[i]=T[position];
            T[position]=swap;
        }
    }

    printf("Sorted Array \n");
    for(i = 0; i < n; i++)
        printf("%d | ", T[i]);

}


//Fibonacci Series using Recursion
#include<stdio.h>

int fib(int n);

int main ()
{
  int n = 10;
  printf("Fib(n) = %d", fib(n));
  getchar();
  return 0;
}

int fib(int n)
{
   if (n == 0)
      return 0;

   if (n == 1)
      return 1;
    
   return fib(n-1) + fib(n-2);
}


#include <stdio.h>
#include <string.h>
#include <stdbool.h>

bool isPalindrome(char str[]);
bool isPalRec(char str[], int s, int e);

bool isPalRec(char str[], int s, int e)
{
    // If there is only one character
    if (s == e)
    return true;
  
    // If first and last
    // characters do not match
    if (str[s] != str[e])
    return false;
  
    // If there are more than 
    // two characters, check if 
    // middle substring is also 
    // palindrome or not.
    if (s < e + 1)
    return isPalRec(str, s + 1, e - 1);
  
    return true;
}

bool isPalindrome(char str[])
{
    int n = strlen(str);
    
    // An empty string is 
    // considered as palindrome
    if (n == 0)
        return true;
  
    return isPalRec(str, 0, n - 1);
}
  
// Driver Code
int main()
{
    char str[] = "geegs";
  
    if (isPalindrome(str))
        printf("Yes\n");
    else
        printf("No\n");
  
    return 0;
}